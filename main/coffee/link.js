// Generated by CoffeeScript 1.3.3
var Link, QueueManager,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

QueueManager = (function() {

  function QueueManager() {
    this.cache = {};
  }

  QueueManager.prototype.generate_name = function() {
    return 'opa';
  };

  QueueManager.prototype.register = function(callback, tags, limit) {
    var tag, _i, _len, _ref, _results;
    tags = tags || this.generate_name();
    limit = limit || 1;
    _ref = tags.split(",");
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tag = _ref[_i];
      if (__indexOf.call(this.cache, tag) < 0) {
        this.cache[tag] = [];
      }
      _results.push(this.cache[tag].push({
        "fnc": callback,
        "limit": limit
      }));
    }
    return _results;
  };

  QueueManager.prototype.callback = function(name, data) {
    var callback;
    callback = this.cache[name];
    callback['function'](data);
    if (callback['limit']) {
      callback['limit'] -= 1;
      if (callback['limit'] === 0) {
        return this.cache.pop(name);
      }
    }
  };

  return QueueManager;

})();

Link = (function() {

  Link.connected = false;

  Link.transport = false;

  Link.reconnect = true;

  Link.queues = false;

  function Link(config) {
    this.config = config;
    this.connect();
    this.queues = new QueueManager();
  }

  Link.prototype.connect = function() {
    this.transport = new SockJS('http://live_messages:9999/transport/');
    this.transport.onopen = function() {
      return window.link.connected();
    };
    this.transport.onclose = function() {
      return window.link.disconnected();
    };
    return this.transport.onmessage = function(e) {
      return window.link.process_message(e);
    };
  };

  Link.prototype.connected = function() {
    return this.connected = true;
  };

  Link.prototype.disconnected = function() {
    this.connected = false;
    if (this.reconnect) {
      return this.connect();
    }
  };

  Link.prototype.process_message = function(e) {
    var data;
    data = $.parseJSON(e.data);
    return this.queues.callback(data['name'], data['result']);
  };

  Link.prototype.query = function(params, callback) {
    var callback_name, data, message;
    if (typeof callback === 'function') {
      callback_name = this.queues.register(callback);
    } else {
      callback_name = callback;
    }
    data = {
      'params': params,
      'name': callback_name
    };
    message = JSON.stringify(data);
    return this.transport.send(message);
  };

  return Link;

})();

$(document).ready(function() {
  return window.link = new Link({});
});
