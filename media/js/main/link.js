// Generated by CoffeeScript 1.3.3
(function() {
  var Include, Link, QueueManager, Singleton, TransportModel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  QueueManager = (function() {

    function QueueManager() {
      this.cache = {};
    }

    QueueManager.prototype.register = function(callback, tags, limit) {
      var tag, _i, _len, _ref, _results;
      tags = tags;
      limit = limit || 1;
      _ref = tags.split(",");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        if (__indexOf.call(this.cache, tag) < 0) {
          this.cache[tag] = [];
        }
        _results.push(this.cache[tag].push({
          "fnc": callback,
          "limit": limit
        }));
      }
      return _results;
    };

    QueueManager.prototype.callback = function(name, data) {
      var callback, callbacks, _i, _len, _results;
      callbacks = this.cache[name];
      if (callbacks) {
        _results = [];
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback['fnc'](data);
          if (callback['limit']) {
            callback['limit'] -= 1;
            if (callback['limit'] === 0) {
              _results.push(delete this.cache[name]);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return QueueManager;

  })();

  Link = (function(_super) {

    __extends(Link, _super);

    Link.connected = false;

    Link.transport = false;

    Link.reconnect = true;

    Link.queues = false;

    function Link(config) {
      this.config = config;
      this.send_form = __bind(this.send_form, this);

      this.post = __bind(this.post, this);

      this.on_disconnected = __bind(this.on_disconnected, this);

      this.on_connected = __bind(this.on_connected, this);

      this.config = SETTINGS.transport;
      this.connect();
      this.queues = new QueueManager();
      this.reconnect = true;
    }

    Link.prototype.connect = function() {
      var address, port,
        _this = this;
      address = this.config.address;
      port = this.config.port;
      this.transport = new SockJS("http://" + address + ":" + port + "/transport/");
      this.transport.onopen = function() {
        return _this.on_connected();
      };
      this.transport.onclose = function() {
        return _this.on_disconnected();
      };
      return this.transport.onmessage = function(e) {
        return _this.process_message(e);
      };
    };

    Link.prototype.on_connected = function() {
      return this.connected = true;
    };

    Link.prototype.on_disconnected = function() {
      var _this = this;
      this.connected = false;
      if (this.reconnect) {
        return setTimeout(function() {
          _this.transport = false;
          return _this.connect();
        }, 1000);
      }
    };

    Link.prototype.process_message = function(e) {
      var data, tag, tag_data, _results;
      data = $.parseJSON(e.data);
      _results = [];
      for (tag in data) {
        tag_data = data[tag];
        _results.push(this.queues.callback(tag, tag_data));
      }
      return _results;
    };

    Link.prototype.query = function(tag, params, callback, method) {
      var data, message;
      if (method == null) {
        method = 'get';
      }
      if (typeof callback === 'function') {
        this.queues.register(callback, tag);
      }
      data = {
        'params': params,
        'tags': [tag],
        'method': method
      };
      message = JSON.stringify(data);
      return this.transport.send(message);
    };

    Link.prototype.subscribe = function(tag, callback) {
      return this.queues.register(callback, tag);
    };

    Link.prototype.post = function(tag, data, callback) {
      var callback_,
        _this = this;
      callback_ = function(result) {
        return callback(result, data);
      };
      return this.query(tag, data, callback_, 'post');
    };

    Link.prototype.send_form = function(form, callback) {
      var data, params, row, tag, _i, _len;
      tag = form;
      data = $(form).serializeArray();
      params = {};
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        row = data[_i];
        params[row['name']] = row['value'];
      }
      return this.query(tag, params, callback);
    };

    return Link;

  })(Spine.Controller);

  Singleton = (function() {

    function Singleton(record) {
      this.record = record;
      this.model = this.record.constructor;
    }

    return Singleton;

  })();

  Include = {
    ajax: function() {
      return new Singleton(this);
    }
  };

  TransportModel = {
    extended: function() {
      return this.change(this.transport_change);
    },
    transport_change: function(record, type, options) {
      var model;
      model = record.constructor.className.toLowerCase();
      if (type === 'create') {
        return transport_link.post(model, record, function(data, post_data) {
          var field, value;
          if (data != null ? data.id : void 0) {
            record.changeID(data.id);
            for (field in data) {
              value = data[field];
              if (field !== 'id') {
                record[field] = value;
              }
            }
            return record.trigger('created');
          }
        });
      }
    }
  };

  this.transport_link = new Link();

  this.TransportModel = TransportModel;

}).call(this);
