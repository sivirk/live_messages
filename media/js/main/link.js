// Generated by CoffeeScript 1.3.3
(function() {
  var Link, QueueManager,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  QueueManager = (function() {

    function QueueManager() {
      this.cache = {};
    }

    QueueManager.prototype.generate_name = function() {
      return 'opa';
    };

    QueueManager.prototype.register = function(callback, tags, limit) {
      var tag, _i, _len, _ref;
      tags = tags || this.generate_name();
      limit = limit || 1;
      _ref = tags.split(",");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        if (__indexOf.call(this.cache, tag) < 0) {
          this.cache[tag] = [];
        }
        this.cache[tag].push({
          "fnc": callback,
          "limit": limit
        });
      }
      return tags;
    };

    QueueManager.prototype.callback = function(name, data) {
      var callback, callbacks, _i, _len, _results;
      callbacks = this.cache[name];
      if (callbacks) {
        _results = [];
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback['fnc'](data);
          if (callback['limit']) {
            callback['limit'] -= 1;
            if (callback['limit'] === 0) {
              _results.push(delete this.cache[name]);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return QueueManager;

  })();

  Link = (function() {

    Link.connected = false;

    Link.transport = false;

    Link.reconnect = true;

    Link.queues = false;

    function Link(config) {
      this.config = config;
      this.connect();
      this.queues = new QueueManager();
    }

    Link.prototype.connect = function() {
      this.transport = new SockJS('http://live_messages:9999/transport/');
      this.transport.onopen = function() {
        return window.link.connected();
      };
      this.transport.onclose = function() {
        return window.link.disconnected();
      };
      return this.transport.onmessage = function(e) {
        return window.link.process_message(e);
      };
    };

    Link.prototype.connected = function() {
      return this.connected = true;
    };

    Link.prototype.disconnected = function() {
      this.connected = false;
      if (this.reconnect) {
        return this.connect();
      }
    };

    Link.prototype.process_message = function(e) {
      var data;
      data = $.parseJSON(e.data);
      return this.queues.callback(data['name'], data['result']);
    };

    Link.prototype.query = function(params, callback, is_blocking) {
      var callback_name, data, message;
      is_blocking = is_blocking || false;
      if (typeof callback === 'function') {
        callback_name = this.queues.register(callback);
      } else {
        callback_name = callback;
      }
      data = {
        'params': params,
        'name': callback_name
      };
      message = JSON.stringify(data);
      return this.transport.send(message);
    };

    return Link;

  })();

  $(document).ready(function() {
    return window.link = new Link({});
  });

}).call(this);
